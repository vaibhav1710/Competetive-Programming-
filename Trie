// Will optimize further 22/2/23

/*
Another detailed implementation is down below**

class Trie {
    class Node {
        Node[] children;
        int cost;
        boolean eow;

        public Node() {
            this.children = new Node[26];
            for (int i = 0; i < 26; i++) children[i] = null;
            this.cost = Integer.MAX_VALUE;
            this.eow = false;
        }
    }

    Node root = new Node();

    public void insert(String word, int c) {
        Node treeRoot = root;
        for (int i = 0; i < word.length(); i++) {
            int idx = word.charAt(i) - 'a';

            if (treeRoot.children[idx] == null) {
                treeRoot.children[idx] = new Node();
            }

            if (i == word.length() - 1) {
                treeRoot.children[idx].cost = Math.min(c, treeRoot.children[idx].cost); 
                treeRoot.children[idx].eow = true;
            }
            treeRoot = treeRoot.children[idx];
        }
    }
}
*/


*https://codeforces.com/contest/1792/submission/194641849*
// for understanding refer above problem and solution

class Node {
    Node links[] = new Node[26]; 
    boolean flag = false; 
    
    public Node() {
        
    }
    
    boolean containsKey(char ch) {
        return (links[ch - 'a'] != null); 
    }
    Node get(char ch) {
        return links[ch-'a']; 
    }
    void put(char ch, Node node) {
        links[ch-'a'] = node; 
    }
    void setEnd() {
        flag = true; 
    }
    boolean isEnd() {
        return flag; 
    }
};
public class Trie {
    private static Node root; 

    //Initialize your data structure here

    Trie() {
        root = new Node(); 
    }


    //Inserts a word into the trie

    public static void insert(String word) {
        Node node = root;
        for(int i = 0;i<word.length();i++) {
            if(!node.containsKey(word.charAt(i))) {
                node.put(word.charAt(i), new Node()); 
            }
            node = node.get(word.charAt(i)); 
        }
        node.setEnd(); 
    }


    //Returns if the word is in the trie

    public static boolean search(String word) {
        Node node = root; 
        for(int i = 0;i<word.length();i++) {
            if(!node.containsKey(word.charAt(i))) {
                return false; 
            }
            node = node.get(word.charAt(i)); 
        }
        if(node.isEnd()) {
            return true; 
        }
        return false; 
    }

    
    //Returns if there is any word in the trie that starts with the given prefix

    public static boolean startsWith(String prefix) {
        Node node = root; 
        for(int i = 0;i<prefix.length();i++) {
            if(!node.containsKey(prefix.charAt(i))) {
                return false; 
            }
            node = node.get(prefix.charAt(i)); 
        }
        return true; 
    }
    public static void main(String args[])
{
	int n = 5;
	int type[] = {1, 1, 2, 3, 2};
	String value[] = {"hello", "help", "help", "hel", "hel"};
	Trie trie=new Trie();
	for (int i = 0; i < n; i++) {
		if (type[i] == 1) {
			trie.insert(value[i]);
		}
		else if (type[i] == 2) {
			if (trie.search(value[i])) {
				System.out.println( "true" );
			}
			else {
				System.out.println("false");
			}
		}
		else {
			if (trie.startsWith(value[i])) {
				System.out.println("true" );
			}
			else {
				System.out.println("false");
			}
		}
	}
}
}

